const express = require('express');
const http = require('http');
const bodyParser = require('body-parser');
const cookieParser = require('cookie-parser');
const session = require('express-session');
const socketIO = require('socket.io');
const path = require('path');
const fs = require('fs');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const { GoogleGenerativeAI } = require("@google/generative-ai");
const sellRouter = require('./sell'); // Import the router module

require('dotenv').config();

const app = express();
const server = http.createServer(app);
const io = socketIO(server);

// 1. CORS Middleware - Move it to the top for proper handling
app.use(cors({
    origin: ['http://localhost:8081', 'https://yourdomain.com'],
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true // Add this to allow cookies to be sent with requests
}));

// 2. Basic middleware setup - Remove duplicates
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(cookieParser());
app.use(session({
    secret: 'techzen-marketplace-secret',
    resave: false,
    saveUninitialized: false,
    cookie: { 
        maxAge: 24 * 60 * 60 * 1000, // 24 hours
        secure: false // Change to true if using HTTPS
    }
}));

// 3. Security middleware
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            scriptSrc: ["'self'", "'unsafe-inline'", 'cdnjs.cloudflare.com'],
            connectSrc: ["'self'", "ws://localhost:8081", "wss://yourdomain.com"], // Allow WebSocket connections
            imgSrc: ["'self'", "data:", "blob:"] // Allow images from these sources
        }
    },
    referrerPolicy: { policy: 'strict-origin-when-cross-origin' }
}));

// 4. Rate Limiting Middleware
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100, // limit each IP to 100 requests per windowMs
    message: 'Too many requests from this IP, please try again later',
    standardHeaders: true,
    legacyHeaders: false,
});
app.use(limiter);

// 5. Static file serving - Move before routes for better performance
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.static(__dirname));

// 6. Request logger middleware
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);
    next();
});

// 7. API Routes - Mount the sell router
app.use('/api', sellRouter);

// 8. Routes
const routes = {
    '/': 'index.html',
    '/login': 'login.html',
    '/ContactUs': 'ContactUs.html',
    '/home': 'home.html',
    '/ai': 'ai.html',
    '/news': 'news.html',
    '/gadgets': 'gadgets.html',
    '/subscribe': 'subscribe.html',
    '/blogs': 'blogs.html',
    '/customer': 'customer.html',
    '/chatbot': 'chatbot.html'
};

// 9. Middleware to check authentication for protected routes
const protectedRoutes = ['/home', '/ai', '/news', '/gadgets', '/subscribe', '/customer', '/blogs', '/chatbot'];
app.use((req, res, next) => {
    if (protectedRoutes.includes(req.path)) {
        const sessionId = req.cookies.sessionId;
        if (!sessionId || !sessions.has(sessionId)) {
            console.log(`Redirecting unauthenticated user from ${req.path} to /login`);
            return res.redirect('/login');
        }
    }
    next();
});

// Global variables
const GEMINI_API_KEY = process.env.GEMINI_API_KEY || "AIzaSyDI8eJG4HqF60a6snvSRYFoXns-6QPQN38";
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
const sessions = new Map();
const activeSessions = new Map();
const adminSessions = new Map();
const chatHistory = new Map();

// Utility Functions
function readUsers() {
    try {
        const usersFile = path.join(__dirname, 'users.json');
        if (!fs.existsSync(usersFile)) {
            fs.writeFileSync(usersFile, JSON.stringify({}));
        }
        return JSON.parse(fs.readFileSync(usersFile, 'utf8'));
    } catch (error) {
        console.error('Error reading users file:', error);
        return {};
    }
}

function writeUsers(users) {
    try {
        fs.writeFileSync(path.join(__dirname, 'users.json'), JSON.stringify(users, null, 2));
    } catch (error) {
        console.error('Error writing users file:', error);
    }
}

function generateSessionId() {
    return Math.random().toString(36).substring(2) + Date.now().toString(36);
}

function saveUserData(userData) {
    const filePath = path.join(__dirname, 'userdata.json');
    let existingData = [];
    
    if (fs.existsSync(filePath)) {
        try {
            const fileContent = fs.readFileSync(filePath, 'utf8');
            existingData = JSON.parse(fileContent);
        } catch (error) {
            console.error('Error reading existing data:', error);
        }
    }

    const newData = {
        ...userData,
        timestamp: new Date().toISOString()
    };
    existingData.push(newData);

    try {
        fs.writeFileSync(filePath, JSON.stringify(existingData, null, 2));
        console.log('User data saved successfully');
    } catch (error) {
        console.error('Error saving user data:', error);
    }
}

// Authentication Routes
app.post('/signup', (req, res) => {
    try {
        const { username, email, password } = req.body;
        const users = readUsers();

        if (users[username]) {
            return res.status(409).json({ error: 'Username already exists' });
        }

        users[username] = { email, password };
        writeUsers(users);

        res.status(200).json({ success: true });
    } catch (err) {
        res.status(500).json({ error: 'Server error' });
    }
});

app.post('/login', (req, res) => {
    try {
        const { username, password } = req.body;
        const users = readUsers();

        if (!users[username] || users[username].password !== password) {
            return res.status(401).json({ error: 'Invalid credentials' });
        }

        const sessionId = generateSessionId();
        sessions.set(sessionId, { username });

        res.cookie('sessionId', sessionId, { httpOnly: true, path: '/' });
        res.status(200).json({ redirect: '/home' });
    } catch (err) {
        res.status(500).json({ error: 'Server error' });
    }
});

app.get('/api/user', (req, res) => {
    const sessionId = req.cookies.sessionId;
    
    if (sessionId && sessions.has(sessionId)) {
        const sessionData = sessions.get(sessionId);
        res.status(200).json({ 
            username: sessionData.username || 'User'
        });
    } else {
        res.status(401).json({ error: 'Not logged in' });
    }
});

app.post('/logout', (req, res) => {
    const sessionId = req.cookies.sessionId;
    
    if (sessionId) {
        sessions.delete(sessionId);
    }

    res.clearCookie('sessionId');
    res.status(200).json({ success: true });
});

// Chatbot API
app.post('/chatbot', async (req, res) => {
    try {
        const userPrompt = req.body.prompt || req.body.message;
        
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
        const result = await model.generateContent(userPrompt);
        const response = result.response.text();
        
        res.status(200).json({ 
            message: response,
            success: true 
        });
    } catch (err) {
        console.error('Error in chatbot API:', err);
        res.status(500).json({ 
            error: 'Failed to process request',
            details: err.message 
        });
    }
});

// Catch-all route for static files - Place after all other routes
app.get('*', (req, res) => {
    const route = routes[req.path];
    if (route) {
        res.sendFile(path.join(__dirname, route));
    } else {
        res.status(404).send('Not Found');
    }
});


// Customer Support Socket Handlers
io.of('/admin').on('connection', (socket) => {
    console.log('Admin connected');

    socket.on('adminLogin', (data) => {
        adminSessions.set(socket.id, {
            adminId: data.adminId,
            socket: socket
        });
        
        socket.emit('adminAuthSuccess');
        
        const customerList = Array.from(activeSessions.values()).map(session => ({
            id: session.customerId,
            username: session.username,
            email: session.email,
            issue: session.issue,
            status: session.status
        }));
        socket.emit('customerList', customerList);
    });

    socket.on('joinCustomerChat', (data) => {
        const session = activeSessions.get(data.customerId);
        if (session) {
            socket.join(data.customerId);
            const history = chatHistory.get(data.customerId) || [];
            socket.emit('chatHistory', { messages: history });
        }
    });

    socket.on('adminMessage', (data) => {
        const session = activeSessions.get(data.customerId);
        if (session) {
            const messageData = {
                type: 'admin',
                message: data.message,
                timestamp: new Date().toISOString()
            };
            
            const history = chatHistory.get(data.customerId) || [];
            history.push(messageData);
            chatHistory.set(data.customerId, history);
            
            io.to(data.customerId).emit('adminMessage', messageData);
        }
    });

    socket.on('disconnect', () => {
        adminSessions.delete(socket.id);
    });
});

// Customer Socket Handlers
io.on('connection', (socket) => {
    socket.on('startCustomerChat', (data) => {
        const customerId = socket.id;
        if (!data.username || !data.email || !data.issue) {
            socket.emit('errorMessage', 'Invalid data provided.');
            return;
        }
        
        saveUserData({
            customerId,
            username: data.username,
            email: data.email,
            issue: data.issue
        });

        activeSessions.set(customerId, {
            customerId,
            username: data.username,
            email: data.email,
            issue: data.issue,
            status: 'waiting',
            socket: socket
        });
        
        socket.join(customerId);
        chatHistory.set(customerId, []);
        
        io.of('/admin').emit('customerList', Array.from(activeSessions.values()).map(session => ({
            id: session.customerId,
            username: session.username,
            email: session.email,
            issue: session.issue,
            status: session.status
        })));
        
        socket.emit('chatStatus', 'Connected to support. Please wait for an agent.');
    });

    socket.on('customerMessage', (data) => {
        const customerId = socket.id;
        const session = activeSessions.get(customerId);
        
        if (session) {
            const messageData = {
                type: 'customer',
                customerId,
                username: data.username,
                message: data.message,
                timestamp: new Date().toISOString()
            };
            
            const history = chatHistory.get(customerId) || [];
            history.push(messageData);
            chatHistory.set(customerId, history);
            
            io.of('/admin').emit('customerMessage', messageData);
        }
    });

    socket.on('issueResolved', (data) => {
        const customerId = socket.id;
        const session = activeSessions.get(customerId);
        
        if (session) {
            session.status = 'resolved';
            activeSessions.set(customerId, session);
            
            io.of('/admin').emit('chatResolved', {
                customerId,
                username: data.username,
                status: 'resolved'
            });
            
            const history = chatHistory.get(customerId) || [];
            history.push({
                type: 'system',
                message: 'Customer marked issue as resolved',
                timestamp: new Date().toISOString()
            });
            chatHistory.set(customerId, history);
        }
    });

    socket.on('disconnect', () => {
        const customerId = socket.id;
        
        activeSessions.delete(customerId);
        chatHistory.delete(customerId);
        
        io.of('/admin').emit('customerList', Array.from(activeSessions.values()).map(session => ({
            id: session.customerId,
            username: session.username,
            email: session.email,
            issue: session.issue,
            status: session.status
        })));
    });
});

// Start Server
const PORT = process.env.PORT || 8081;
server.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`));